/* YET ANOTHER SLICES UTILITY PACKAGE */

package main

import (
	"flag"
	"fmt"
	"os"
	"strings"
	"text/template"
)

type tmplVars struct {
	Type              string
	TypeCased         string
	SingleVal         string
	MultipleVals      string
	TypePackage       string
	FilePackage       string
	FilePackageSimple string // the last part of FilePackage splitted by "/"
}

func main() {
	var typeStr, typeCased, typePackage, filePackage, filePackageSimple, singleVal, multipleVals string
	var addTest bool
	flag.StringVar(&typePackage, "typePackage", "", "(Optional) The string identifier of the package which contains the type. Example: 'time'")
	flag.StringVar(&filePackage, "filePackage", "github.com/j4rv/yasup", "(Optional) The string identifier of the package of the autogenerated files.")
	flag.StringVar(&typeStr, "type", "string", "The string identifier of the type. Example: 'int' or 'time.time'")
	flag.StringVar(&typeCased, "typeCased", "", "(Optional) The CamelCase string identifier of the type. Example: 'Int' or 'Time'. If not set, the first letter of 'type' will automatically be cased.")
	flag.StringVar(&singleVal, "singleVal", "\"foobar\"", "A single value for the type. Will be used in tests.")
	flag.StringVar(&multipleVals, "multipleVals", "\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"",
		"A comma separated list of ~ten or more different values for the type. Will be used in tests.")
	flag.BoolVar(&addTest, "test", false, "Adds automatic tests. A one item list and ten item lists will need to be provided using their corresponding flags.")
	flag.Parse()

	if typeCased == "" {
		typeCased = strings.Title(typeStr)
	}

	packageParts := strings.Split(filePackage, "/")
	filePackageSimple = packageParts[len(packageParts)-1]

	fmt.Println("Building slices file for type", typeStr)
	build(tmplVars{
		Type:              typeStr,
		TypeCased:         typeCased,
		SingleVal:         singleVal,
		MultipleVals:      multipleVals,
		TypePackage:       typePackage,
		FilePackage:       filePackage,
		FilePackageSimple: filePackageSimple,
	}, addTest)
}

func build(vars tmplVars, addTest bool) {
	execTmpl(srcTemplate, vars.TypeCased+"Slices.go", vars)
	execTmpl(constsTemplate, "consts.go", vars) // add flag to skip execution of this template

	if addTest {
		execTmpl(testTemplate, vars.TypeCased+"Slices_test.go", vars)
	}
}

func execTmpl(t *template.Template, outputName string, typeToBuild interface{}) {
	f, err := os.Create(outputName)
	defer f.Close()

	if err != nil {
		panic(fmt.Sprint("create file: ", err))
	}

	err = t.Execute(f, typeToBuild)
	if err != nil {
		panic(fmt.Sprint("execute: ", err))
	}
}
