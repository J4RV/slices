// Code generated by yasupGen; DO NOT EDIT.

package yasup_test

import (
	yasup "github.com/j4rv/yasup"
	"testing"
)

func Test_StringInsert(t *testing.T) {
	type testCase struct {
		name     string
		slice    []string
		insertAt int
	}
	base := []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}
	tcs := []testCase{
		{"First", []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, 0},
		{"Middle", []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, len(base) / 2},
		{"Last", []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, len(base)},
		{"Empty slice", []string{}, 0},
		{"Nil slice", nil, 0},
	}
	for _, tc := range tcs {
		yasup.StringInsert(&tc.slice, "foobar", tc.insertAt)
		if tc.slice[tc.insertAt] != "foobar" {
			t.Error(tc)
		}
	}
}

func Test_StringFastShuffle(t *testing.T) {
	shuffles := [][]string{}
	for i := 0; i < 8; i++ {
		or := []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}
		yasup.StringFastShuffle(or)
		shuffles = append(shuffles, or)
	}
	for i := range shuffles {
		for j := range shuffles {
			if i >= j {
				continue
			}
			if yasup.StringEquals(shuffles[i], shuffles[j]) {
				// If there is any collision in 8 shuffles, the Shuffle function is probably broken
				t.Fail()
			}
		}
	}
	// check that nil does not panic
	yasup.StringFastShuffle(nil)
}

func Test_StringSecureShuffle(t *testing.T) {
	shuffles := [][]string{}
	for i := 0; i < 8; i++ {
		or := []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}
		yasup.StringSecureShuffle(or)
		shuffles = append(shuffles, or)
	}
	for i := range shuffles {
		for j := range shuffles {
			if i >= j {
				continue
			}
			if yasup.StringEquals(shuffles[i], shuffles[j]) {
				// If there is any collision in 8 shuffles, the Shuffle function is probably broken
				t.Fail()
			}
		}
	}
	// check that nil does not panic
	yasup.StringSecureShuffle(nil)
}

func Test_StringEquals(t *testing.T) {
	type TestCase struct {
		name string
		a, b []string
		exp  bool
	}
	tcs := []TestCase{
		// nil checks
		{"Equals nil", nil, nil, true},
		// golang treats empty and nil slices as the same thing in most cases, we'll do the same
		{"Left nil, right empty", nil, []string{}, true},
		{"Right nil, left empty", []string{}, nil, true},
		{"Left nil, right not empty", nil, []string{"foobar"}, false},
		{"Right nil, left not empty", []string{"foobar"}, nil, false},

		{"Equals empty", []string{}, []string{}, true},
		{"Equals 1", []string{"foobar"}, []string{"foobar"}, true},
		{"Equals 2", []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, true},
		{"Not equals 1", []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum", "foobar"}, false},
		{"Not equals 2", []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, []string{}, false},
		{"Not equals 3", []string{"0", "1", "2", "3", "4", "5", "6", "7", "lorem", "ipsum"}, []string{"foobar", "foobar"}, false},
	}
	for _, tc := range tcs {
		got := yasup.StringEquals(tc.a, tc.b)
		if got != tc.exp {
			t.Error(tc)
		}
	}
}
