// Code generated by yasupGen; DO NOT EDIT.

package yasup

import (
	crypto "crypto/rand"
	"math/big"
	"math/rand"
)

var zeroValueInt int

//IntInsert will append elem at the position i. Might return ErrIndexOutOfBounds.
func IntInsert(sl *[]int, elem int, i int) error {
	if i < 0 || i > len(*sl) {
		return ErrIndexOutOfBounds
	}
	*sl = append(*sl, elem)
	copy((*sl)[i+1:], (*sl)[i:])
	(*sl)[i] = elem
	return nil
}

//IntDelete delete the element at the position i. Might return ErrIndexOutOfBounds.
func IntDelete(sl *[]int, i int) error {
	if i < 0 || i >= len(*sl) {
		return ErrIndexOutOfBounds
	}
	*sl = append((*sl)[:i], (*sl)[i+1:]...)
	return nil
}

//IntContains will return true if elem is present in the slice and false otherwise.
func IntContains(sl []int, elem int) bool {
	for i := range sl {
		if sl[i] == elem {
			return true
		}
	}
	return false
}

//IntIndex returns the index of the first instance of elem, or -1 if elem is not present.
func IntIndex(sl []int, elem int) int {
	for i := range sl {
		if sl[i] == elem {
			return i
		}
	}
	return -1
}

//IntLastIndex returns the index of the last instance of elem in the slice, or -1 if elem is not present.
func IntLastIndex(sl []int, elem int) int {
	for i := len(sl) - 1; i >= 0; i-- {
		if sl[i] == elem {
			return i
		}
	}
	return -1
}

//IntCount will return an int representing the amount of times that elem is present in the slice.
func IntCount(sl []int, elem int) int {
	var n int
	for i := range sl {
		if sl[i] == elem {
			n++
		}
	}
	return n
}

//IntPush is equivalent to IntInsert with index len(*sl).
func IntPush(sl *[]int, elem int) {
	IntInsert(sl, elem, len(*sl))
}

//IntFrontPush is equivalent to IntInsert with index 0.
func IntFrontPush(sl *[]int, elem int) {
	IntInsert(sl, elem, 0)
}

//IntPop is equivalent to getting and removing the last element of the slice. Might return ErrEmptySlice.
func IntPop(sl *[]int) (int, error) {
	if len(*sl) == 0 {
		return zeroValueInt, ErrEmptySlice
	}
	last := len(*sl) - 1
	ret := (*sl)[last]
	IntDelete(sl, last)
	return ret, nil
}

//IntPop is equivalent to getting and removing the first element of the slice. Might return ErrEmptySlice.
func IntFrontPop(sl *[]int) (int, error) {
	if len(*sl) == 0 {
		return zeroValueInt, ErrEmptySlice
	}
	ret := (*sl)[0]
	IntDelete(sl, 0)
	return ret, nil
}

//IntReplace modifies the slice with the first n non-overlapping instances of old replaced by new. If n equals -1, there is no limit on the number of replacements.
func IntReplace(sl []int, old, new int, n int) (replacements int) {
	left := n
	for i := range sl {
		if left == 0 {
			break // no replacements left
		}
		if sl[i] == old {
			sl[i] = new
			left--
		}
	}
	return n - left
}

//IntReplaceAll is equivalent to IntReplace with n = -1.
func IntReplaceAll(sl []int, old, new int) (replacements int) {
	return IntReplace(sl, old, new, -1)
}

//IntEquals compares two int slices. Returns true if their elements are equal.
func IntEquals(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

//IntFastShuffle will randomly swap the int elements of a slice using math/rand (fast but not cryptographycally secure).
func IntFastShuffle(sp []int) {
	rand.Shuffle(len(sp), func(i, j int) {
		sp[i], sp[j] = sp[j], sp[i]
	})
}

//IntSecureShuffle will randomly swap the int elements of a slice using crypto/rand (resource intensive but cryptographically secure).
func IntSecureShuffle(sp []int) error {
	var i int64
	size := int64(len(sp)) - 1
	for i = 0; i < size+1; i++ {
		bigRandI, err := crypto.Int(crypto.Reader, big.NewInt(size))
		if err != nil {
			return err
		}
		randI := bigRandI.Int64()
		sp[size-i], sp[randI] = sp[randI], sp[size-i]
	}
	return nil
}
