// Code generated by yasupGen; DO NOT EDIT.

package yasup

import (
	crypto "crypto/rand"
	"math/big"
	"math/rand"
)

//Complex64Insert will append elem at the position i. Might return ErrIndexOutOfBounds.
func Complex64Insert(sl *[]complex64, elem complex64, i int) error {
	if i < 0 || i > len(*sl) {
		return ErrIndexOutOfBounds
	}
	*sl = append(*sl, elem)
	copy((*sl)[i+1:], (*sl)[i:])
	(*sl)[i] = elem
	return nil
}

//Complex64Delete delete the element at the position i. Might return ErrIndexOutOfBounds.
func Complex64Delete(sl *[]complex64, i int) error {
	if i < 0 || i >= len(*sl) {
		return ErrIndexOutOfBounds
	}
	*sl = append((*sl)[:i], (*sl)[i+1:]...)
	return nil
}

//Complex64Push is equivalent to Complex64Insert with index len(*sl)
func Complex64Push(sl *[]complex64, elem complex64) {
	Complex64Insert(sl, elem, len(*sl))
}

//Complex64Pop is equivalent to getting and removing the last element of the slice. Might return ErrEmptySlice.
func Complex64Pop(sl *[]complex64) (complex64, error) {
	if len(*sl) == 0 {
		var zeroVal complex64
		return zeroVal, ErrEmptySlice
	}
	last := len(*sl) - 1
	ret := (*sl)[last]
	Complex64Delete(sl, last)
	return ret, nil
}

//Complex64Equals compares two complex64 slices. Returns true if their elements are equal.
func Complex64Equals(a, b []complex64) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

//Complex64FastShuffle will randomly swap the complex64 elements of a slice using math/rand (fast but not cryptographycally secure).
func Complex64FastShuffle(sp []complex64) {
	rand.Shuffle(len(sp), func(i, j int) {
		sp[i], sp[j] = sp[j], sp[i]
	})
}

//Complex64SecureShuffle will randomly swap the complex64 elements of a slice using crypto/rand (resource intensive but cryptographycally secure).
func Complex64SecureShuffle(sp []complex64) error {
	var i int64
	size := int64(len(sp)) - 1
	for i = 0; i < size+1; i++ {
		bigRandI, err := crypto.Int(crypto.Reader, big.NewInt(size))
		if err != nil {
			return err
		}
		randI := bigRandI.Int64()
		sp[size-i], sp[randI] = sp[randI], sp[size-i]
	}
	return nil
}
