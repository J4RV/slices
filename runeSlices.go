// Code generated by yasupGen; DO NOT EDIT.

package yasup

import (
	crypto "crypto/rand"
	"math/big"
	"math/rand"
)

var zeroValueRune rune

//RuneContains will return true if elem is present in the slice and false otherwise.
func RuneContains(sl []rune, elem rune) bool {
	for i := range sl {
		if sl[i] == elem {
			return true
		}
	}
	return false
}

//RuneInsert will append elem at the position i. Might return ErrIndexOutOfBounds.
func RuneInsert(sl *[]rune, elem rune, i int) error {
	if i < 0 || i > len(*sl) {
		return ErrIndexOutOfBounds
	}
	*sl = append(*sl, elem)
	copy((*sl)[i+1:], (*sl)[i:])
	(*sl)[i] = elem
	return nil
}

//RuneDelete delete the element at the position i. Might return ErrIndexOutOfBounds.
func RuneDelete(sl *[]rune, i int) error {
	if i < 0 || i >= len(*sl) {
		return ErrIndexOutOfBounds
	}
	*sl = append((*sl)[:i], (*sl)[i+1:]...)
	return nil
}

//RunePush is equivalent to RuneInsert with index len(*sl)
func RunePush(sl *[]rune, elem rune) {
	RuneInsert(sl, elem, len(*sl))
}

//RuneFrontPush is equivalent to RuneInsert with index 0
func RuneFrontPush(sl *[]rune, elem rune) {
	RuneInsert(sl, elem, 0)
}

//RunePop is equivalent to getting and removing the last element of the slice. Might return ErrEmptySlice.
func RunePop(sl *[]rune) (rune, error) {
	if len(*sl) == 0 {
		return zeroValueRune, ErrEmptySlice
	}
	last := len(*sl) - 1
	ret := (*sl)[last]
	RuneDelete(sl, last)
	return ret, nil
}

//RunePop is equivalent to getting and removing the first element of the slice. Might return ErrEmptySlice.
func RuneFrontPop(sl *[]rune) (rune, error) {
	if len(*sl) == 0 {
		return zeroValueRune, ErrEmptySlice
	}
	ret := (*sl)[0]
	RuneDelete(sl, 0)
	return ret, nil
}

//RuneEquals compares two rune slices. Returns true if their elements are equal.
func RuneEquals(a, b []rune) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

//RuneFastShuffle will randomly swap the rune elements of a slice using math/rand (fast but not cryptographycally secure).
func RuneFastShuffle(sp []rune) {
	rand.Shuffle(len(sp), func(i, j int) {
		sp[i], sp[j] = sp[j], sp[i]
	})
}

//RuneSecureShuffle will randomly swap the rune elements of a slice using crypto/rand (resource intensive but cryptographycally secure).
func RuneSecureShuffle(sp []rune) error {
	var i int64
	size := int64(len(sp)) - 1
	for i = 0; i < size+1; i++ {
		bigRandI, err := crypto.Int(crypto.Reader, big.NewInt(size))
		if err != nil {
			return err
		}
		randI := bigRandI.Int64()
		sp[size-i], sp[randI] = sp[randI], sp[size-i]
	}
	return nil
}
